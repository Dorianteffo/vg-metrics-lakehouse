name: CD

on: 
    push: 
        branches: 
            - master
        paths: 
            - 'lambda_data_generator/**'
    

jobs: 
    push_docker_image: 
        runs-on: ubuntu-latest
        steps:
          - name: checkout repo 
            uses: actions/checkout@v2

          - name: Configure AWS credentials
            uses: aws-actions/configure-aws-credentials@v4 
            with:
              aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
              aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
              aws-region: eu-west-3 

          - name: Login to Amazon ECR
            id: login-ecr
            uses: aws-actions/amazon-ecr-login@v2

          - name: Build, tag, and push docker image to Amazon ECR
            env:
              REGISTRY: ${{ steps.login-ecr.outputs.registry }}
              REPOSITORY: ecr-repo-lambda-vg-sales
              IMAGE_TAG: ${{ github.sha }}
              FUNCTION_NAME: vg-sales-datagen
              ACCOUNT_ID: ${{ secrets.ACCOUNT_ID }}
            run: |
                cd lambda_data_generator
                docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
                docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
                aws lambda get-function --function-name $FUNCTION_NAME >/dev/null 2>&1 && \
                echo "UPDATING THE LAMBDA FUNCTION....."; \
                aws lambda update-function-code \
                --function-name $FUNCTION_NAME \
                --image-uri $REGISTRY/$REPOSITORY:$IMAGE_TAG || \
                echo "CREATING THE LAMBDA FUNCTION......"; \
                aws lambda create-function \
                --function-name $FUNCTION_NAME \
                --package-type Image \
                --code ImageUri=$REGISTRY/$REPOSITORY:$IMAGE_TAG \
                --role arn:aws:iam::${ACCOUNT_ID}:role/s3-cloudwatch-ecr-lambdarole \
                